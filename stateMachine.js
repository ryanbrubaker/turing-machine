// Generated by CoffeeScript 1.3.1
(function() {

  Turing.StateMachine = (function() {

    StateMachine.name = 'StateMachine';

    function StateMachine() {
      this.reset();
    }

    StateMachine.prototype.reset = function() {
      this.states = {};
      return this.currentState = null;
    };

    StateMachine.prototype.setup = function(states) {
      var character, currentStateName, i, initialStateName, newState, operations, state, stateName, _i, _j, _len, _ref, _ref1, _ref2;
      this.states = {};
      this.currentState = null;
      if (states.length === 0) {
        throw new Error("You must specify at least one state.");
      }
      initialStateName = null;
      currentStateName = null;
      for (_i = 0, _len = states.length; _i < _len; _i++) {
        state = states[_i];
        if (currentStateName === '' && state[0] === '') {
          throw new Error('State must have a name.');
        }
        if (state[1] === '') {
          throw new Error('State must specify a character.');
        }
        if (!this.validOperations(state[2])) {
          throw new Error('Allowed operations are "L", "R", "E", "P[x]"');
        }
        operations = [];
        if (state[2].length > 0) {
          operations = state[2].split(',');
        }
        for (i = _j = 0, _ref = operations.length; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
          operations[i] = operations[i].trim();
        }
        if (state[0] === '') {
          this.states[currentStateName].addOperations(state[1], operations, state[3]);
        } else {
          currentStateName = state[0];
          newState = new Turing.State;
          newState.addOperations(state[1], operations, state[3]);
          this.states[currentStateName] = newState;
          if (!(initialStateName != null)) {
            initialStateName = currentStateName;
          }
        }
      }
      _ref1 = this.states;
      for (stateName in _ref1) {
        state = _ref1[stateName];
        _ref2 = state.getOperations();
        for (character in _ref2) {
          operations = _ref2[character];
          if (!this.states[operations[Turing.State.kNextStateKey]]) {
            throw new Error('Result state does not exist.');
          }
        }
      }
      return this.currentState = this.states[initialStateName];
    };

    StateMachine.prototype.validOperations = function(operationList) {
      var operation, operations, valid, _i, _len;
      valid = true;
      if ("" !== operationList) {
        operations = operationList.split(',');
        for (_i = 0, _len = operations.length; _i < _len; _i++) {
          operation = operations[_i];
          operation = operation.trim();
          valid = valid && ((operation === 'L' || operation === 'R' || operation === 'E') || (operation[0] === 'P' && operation.length === 2));
        }
      }
      return valid;
    };

    StateMachine.prototype.processState = function(character) {
      var operations;
      if (character === "") {
        character = 'none';
      }
      if (null === this.currentState) {
        throw new Error("Invalid state.");
      } else {
        operations = this.currentState.operationsFor(character).slice(0);
        this.currentState = this.states[this.currentState.nextStateFor(character)];
        return operations;
      }
    };

    return StateMachine;

  })();

}).call(this);
