// Generated by CoffeeScript 1.3.1
(function() {
  var currentOperations, drawCurrentTapeSnapshot, drawLine, init, kThickLine, machineTimer, nextOperation, shiftHeadLeft, shiftHeadRight, shiftTapeStep, shiftTimer, stateMachine, tape;

  machineTimer = null;

  shiftTimer = null;

  kThickLine = true;

  drawLine = function(xCoord, drawThick) {
    var context;
    context = document.getElementById("paperTapeCanvas").getContext('2d');
    context.lineWidth = drawThick ? 5 : 1;
    context.beginPath();
    context.moveTo(xCoord, 0);
    context.lineTo(xCoord, 50);
    context.closePath();
    return context.stroke();
  };

  drawCurrentTapeSnapshot = function() {
    var context, i, _i;
    context = document.getElementById("paperTapeCanvas").getContext('2d');
    for (i = _i = 0; _i <= 8; i = ++_i) {
      drawLine(i * 100, !kThickLine);
      context.fillText(tape.characterAtIndex(i), i * 100 + 35, 40);
    }
    drawLine(400, kThickLine);
    return drawLine(500, kThickLine);
  };

  shiftTapeStep = function(xCoordFunc, inc, stepNum, stepIndices) {
    var charIndex, context, i, _i, _len;
    context = document.getElementById("paperTapeCanvas").getContext('2d');
    if (stepNum <= 100) {
      context.clearRect(0, 0, context.canvas.width, context.canvas.height);
      for (_i = 0, _len = stepIndices.length; _i < _len; _i++) {
        i = stepIndices[_i];
        drawLine(xCoordFunc(i, stepNum), !kThickLine);
        charIndex = i - 1;
        if (inc) {
          charIndex = i + 1;
        }
        context.fillText(tape.characterAtIndex(charIndex), xCoordFunc(i, stepNum) + 35, 40);
      }
      stepNum += 2;
      return shiftTimer = setTimeout(function() {
        return shiftTapeStep(xCoordFunc, inc, stepNum, stepIndices);
      }, 1);
    } else {
      drawLine(400, kThickLine);
      return drawLine(500, kThickLine);
    }
  };

  shiftHeadLeft = function() {
    return shiftTapeStep(function(boxIndex, stepNum) {
      return boxIndex * 100 + stepNum;
    }, true, 0, [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8]);
  };

  shiftHeadRight = function() {
    return shiftTapeStep(function(boxIndex, stepNum) {
      return boxIndex * 100 - stepNum;
    }, false, 0, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
  };

  stateMachine = new Turing.StateMachine;

  tape = new Turing.Tape(4);

  currentOperations = [];

  nextOperation = function() {
    var operation;
    if (0 === currentOperations.length) {
      try {
        currentOperations = stateMachine.processState(tape.currentCharacter());
      } catch (error) {
        alert(error);
      }
    } else {
      operation = currentOperations.shift();
      tape.doOperation(operation);
      switch (operation) {
        case "E":
          drawCurrentTapeSnapshot();
          break;
        case "L":
          shiftHeadLeft();
          break;
        case "R":
          shiftHeadRight();
          break;
        default:
          drawCurrentTapeSnapshot();
      }
    }
    return machineTimer = setTimeout(nextOperation, 500);
  };

  init = function() {
    var addRowToTable, clearTable, context, setPreconfiguredMachine;
    context = document.getElementById("paperTapeCanvas").getContext('2d');
    context.font = "bold 48px sans-serif";
    context.strokeStyle = "#000";
    drawCurrentTapeSnapshot();
    clearTable = function() {
      var addRowCell, addedRows;
      clearInterval(machineTimer);
      clearInterval(shiftTimer);
      stateMachine.reset();
      tape.reset();
      context.clearRect(0, 0, context.canvas.width, context.canvas.height);
      drawCurrentTapeSnapshot();
      addedRows = $('.addedRow');
      if (addedRows.length > 0) {
        addedRows.remove();
        addRowCell = $(document.createElement('i'));
        addRowCell.addClass('icon-plus-sign');
        return $('#stateMachineTable th:first-child').html('<i class="icon-plus-sign"></i>');
      }
    };
    addRowToTable = function() {
      var newRow;
      newRow = $('#stateRowTemplate').clone();
      newRow.id = '';
      newRow.addClass('addedRow');
      $('#stateMachineTable').append(newRow);
      return newRow;
    };
    $(function() {
      return $('#clear-machine').on('click', clearTable);
    });
    $(function() {
      return $('#start-machine').on('click', function() {
        var i, row, stateRawData, stateRows, statesRawData, td, _i, _j, _len;
        try {
          stateRows = $('#stateMachineTable .addedRow');
          statesRawData = [];
          for (_i = 0, _len = stateRows.length; _i < _len; _i++) {
            row = stateRows[_i];
            stateRawData = [];
            for (i = _j = 1; _j <= 4; i = ++_j) {
              td = $(row).children()[i];
              stateRawData.push($(td).children()[0].value.trim());
            }
            statesRawData.push(stateRawData);
          }
          stateMachine.setup(statesRawData);
        } catch (error) {
          alert(error);
        }
        try {
          currentOperations = stateMachine.processState("");
          return nextOperation();
        } catch (error) {
          return alert(error);
        }
      });
    });
    $(function() {
      return $('#stateMachineTable').on('click', '.icon-plus-sign', function(eventObject) {
        addRowToTable();
        return $(eventObject.target).parent().empty();
      });
    });
    setPreconfiguredMachine = function(machine) {
      var i, newRow, numRow, numRows, rowValues, textFields, _i, _j, _len, _ref, _results;
      clearTable();
      $('#stateMachineTable').find('.icon-plus-sign').remove();
      numRows = machine.length;
      numRow = 0;
      _results = [];
      for (_i = 0, _len = machine.length; _i < _len; _i++) {
        rowValues = machine[_i];
        newRow = addRowToTable();
        textFields = $(newRow).children('td').children('input');
        for (i = _j = 0, _ref = rowValues.length; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
          textFields[i].value = rowValues[i];
        }
        if (numRow < (numRows - 1)) {
          newRow.find('.icon-plus-sign').remove();
        }
        _results.push(numRow += 1);
      }
      return _results;
    };
    $(function() {
      return $('#alternating-machine').on('click', function() {
        return setPreconfiguredMachine(Turing.machines.alternatingOnesAndZeros);
      });
    });
    $(function() {
      return $('#one-fourth-machine').on('click', function() {
        return setPreconfiguredMachine(Turing.machines.oneFourth);
      });
    });
    return $(function() {
      return $('#sequences-of-ones').on('click', function() {
        return setPreconfiguredMachine(Turing.machines.sequencesOfOnes);
      });
    });
  };

  $(document).ready(init);

}).call(this);
