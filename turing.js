// Generated by CoffeeScript 1.3.1
(function() {
  var State, StateMachine, init, list, shiftTapeLeft, shiftTapeRight, shiftTapeStep, symbols;

  symbols = list = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'];

  State = (function() {

    State.name = 'State';

    function State(nextState) {
      this.operations = {};
      this.nextState = nextState;
    }

    State.prototype.addOperation = function(character, operations) {
      return this.operations[character] = operations;
    };

    State.prototype.operationsFor = function(character) {
      if (this.operations[character] != null) {
        return this.operations[character];
      } else {
        throw new Error('Encountered invalid symbol.');
      }
    };

    State.prototype.nextState = function() {
      return this.nextState;
    };

    return State;

  })();

  StateMachine = (function() {

    StateMachine.name = 'StateMachine';

    function StateMachine() {
      this.states = {};
      this.currentState = null;
    }

    StateMachine.prototype.setup = function(states) {
      var currentState, currentStateName, initialStateName, newState, state, stateName, _i, _len, _ref;
      this.states = {};
      this.currentState = null;
      if (states.length === 0) {
        throw new Error("You must specify at least one state.");
      }
      initialStateName = '';
      currentStateName = '';
      for (_i = 0, _len = states.length; _i < _len; _i++) {
        state = states[_i];
        if (currentStateName === '' && state[0] === '') {
          throw new Error('State must have a name.');
        }
        if (state[1] === '') {
          throw new Error('State must specify a character.');
        }
        if (!this.validOperations(state[2])) {
          throw new Error('Allowed operations are "L", "R", "E", "P[x]"');
        }
        if (state[0] === '') {
          this.states[currentStateName].addOperation(state[1], state[2]);
        } else {
          currentStateName = state[0];
          newState = new State(state[3]);
          newState.addOperation(state[1], state[2]);
          this.states[currentStateName] = newState;
        }
      }
      _ref = this.states;
      for (stateName in _ref) {
        state = _ref[stateName];
        if (!(this.states[state.nextState] != null)) {
          throw new Error('Result state does not exist.');
        }
      }
      return currentState = this.states[initialStateName];
    };

    StateMachine.prototype.goNextState = function() {
      return this.currentState = this.currentState.nextState;
    };

    StateMachine.prototype.validOperations = function(operationList) {
      var operation, operations, valid, _i, _len;
      valid = true;
      operations = operationList.split(',');
      for (_i = 0, _len = operations.length; _i < _len; _i++) {
        operation = operations[_i];
        operation = operation.trim();
        valid = valid && ((operation === 'L' || operation === 'R' || operation === 'E') || (operation[0] === 'P' && operation.length === 2));
      }
      return valid;
    };

    StateMachine.prototype.processState = function(character) {
      var operations;
      if (null === this.currentState) {
        throw new Error("Invalid state.");
      } else {
        operations = this.currentState[character];
        this.currentState = this.currentState.nextState;
        return operations;
      }
    };

    return StateMachine;

  })();

  shiftTapeStep = function(xCoordFunc, stepNum, stepIndices) {
    var context, i, _i, _len;
    if (stepNum <= 100) {
      context = document.getElementById("paperTapeCanvas").getContext('2d');
      context.clearRect(0, 0, context.canvas.width, context.canvas.height);
      context.font = "bold 48px sans-serif";
      for (_i = 0, _len = stepIndices.length; _i < _len; _i++) {
        i = stepIndices[_i];
        context.beginPath();
        context.moveTo(xCoordFunc(i, stepNum), 0);
        context.lineTo(xCoordFunc(i, stepNum), 75);
        context.strokeStyle = "#999";
        context.closePath();
        context.stroke();
        context.fillText(symbols[i], i * 100 + 35 + stepNum, 50);
      }
      stepNum += 1;
      return setTimeout(function() {
        return shiftTapeStep(xCoordFunc, stepNum, stepIndices);
      }, 1);
    }
  };

  shiftTapeRight = function() {
    return shiftTapeStep(function(boxIndex, stepNum) {
      return boxIndex * 100 + stepNum;
    }, 0, [0, 1, 2, 3, 4, 5, 6, 7, 8]);
  };

  shiftTapeLeft = function() {
    return shiftTapeStep(function(boxIndex, stepNum) {
      return boxIndex * 100 - stepNum;
    }, 0, [1, 2, 3, 4, 5, 6, 7, 8, 9]);
  };

  init = function() {
    var stateMachine;
    stateMachine = new StateMachine();
    $(function() {
      return $('#start-machine').on('click', function() {
        var i, row, stateRawData, stateRows, statesRawData, td, _i, _j, _len;
        try {
          stateRows = $('#stateMachineTable .addedRow');
          statesRawData = [];
          for (_i = 0, _len = stateRows.length; _i < _len; _i++) {
            row = stateRows[_i];
            stateRawData = [];
            for (i = _j = 1; _j <= 4; i = ++_j) {
              td = $(row).children()[i];
              stateRawData.push($(td).children()[0].value.trim());
            }
            statesRawData.push(stateRawData);
          }
          return stateMachine.setup(statesRawData);
        } catch (error) {
          return alert(error);
        }
      });
    });
    return $(function() {
      return $('#stateMachineTable').on('click', '.icon-plus-sign', function(eventObject) {
        var newRow;
        newRow = $('#stateRowTemplate').clone();
        newRow.id = '';
        $('#stateMachineTable').append(newRow);
        return $(eventObject.target).parent().empty();
      });
    });
  };

  $(document).ready(init);

}).call(this);
